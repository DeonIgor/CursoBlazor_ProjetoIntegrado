@page "/products"
@inject HttpClient http
@inject NavigationManager NavManager

<div class="mb-5">
    <h1 class="display-7">Produtos</h1>
    <p class="lead">
        Esse Componente exemplifica a conexão com banco de dados com Dapper
    </p>
</div>

@if (Prods == null)
{
    <p class="lead">
        Carregando...
    </p>
}
else if (Prods.Count == 0)
{
    <p class="text-body-secondary">
        Não há items para exibir
    </p>
    <button class="btn btn-secondary w-auto" @onclick="fetchItems">
        Recarregar Lista
    </button>
    <button class="btn btn-primary w-auto" @onclick="addItem">
        Adicionar Produto
    </button>
}
else
{
    <div class="row-2 col-10">

        <div class="row pb-1">
            <div class="col-9 rounded bg-dark text-white">
                <div class="row py-1">
                    <div class="col-4 fw-semibold text-center">Produto</div>
                    <div class="col-4 fw-semibold text-center">Descrição</div>
                    <div class="col-4 fw-semibold text-center">Valor</div>
                </div>
            </div>
            <div class="col-3 p-0">
                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary w-100 ms-1" @onclick="addItem">
                        Novo
                    </button>
                </div>
            </div>
        </div>

        <div class="row">
            @foreach (var item in ProductList)
            {
                <EditForm Model="@item.Key" class="d-flex w-100 p-0 pb-1">
                    <DataAnnotationsValidator />

                    @if(item.Value == "readonly")       // Visualização
                    {
                        <input type="text" class="form-control bg-transparent w-25 me-1 text-truncate" @bind="item.Key.Name" disabled />
                        <ValidationMessage For="() => item.Key.Name" />
                        <input type="text" class="form-control bg-transparent w-25 mx-1 text-truncate" @bind="item.Key.Description" placeholder="---" disabled />
                        <ValidationMessage For="() => item.Key.Description" />
                        <div class="input-group w-25 mx-1">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-transparent rounded-0 rounded-start border-end-0 pe-0">R$</span>
                            </div>
                            <input type="number" class="form-control bg-transparent rounded-0 rounded-end border-start-0 ps-1" step="0.01" @bind="item.Key.Price" disabled />
                        </div>
                        <ValidationMessage For="() => item.Key.Price" />

                        <div class="d-flex w-25">
                            <button class="btn btn-dark w-50 me-1" @onclick="() => editItem(item.Key)">
                                Editar
                            </button>
                            <button class="btn btn-danger w-50" @onclick="e => deleteItem(item.Key)">
                                Deletar
                            </button>
                        </div>
                    }
                    else                                // Edição
                    {
                        <div class="d-flex flex-column w-100">
                            <div class="d-flex w-100 mb-1">
                                <input type="text" class="form-control bg-transparent w-25 me-1 text-truncate" @bind="item.Key.Name" />
                                <ValidationMessage For="() => item.Key.Name" />
                                <input type="text" class="form-control bg-transparent w-25 mx-1 text-truncate" @bind="item.Key.Description" placeholder="---" />
                                <ValidationMessage For="() => item.Key.Description" />
                                <div class="input-group w-25 mx-1">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text bg-transparent rounded-0 rounded-start border-end-0 pe-0">R$</span>
                                    </div>
                                    <input type="number" class="form-control bg-transparent rounded-0 rounded-end border-start-0 ps-1" step="0.01" @bind="item.Key.Price" />
                                </div>
                                <ValidationMessage For="() => item.Key.Price" />

                                <div class="d-flex w-25">
                                    <button class="btn btn-success w-50 me-1" @onclick="() => editItem(item.Key)">
                                        Salvar
                                    </button>
                                    <button class="btn btn-danger w-50" @onclick="e => deleteItem(item.Key)">
                                        Deletar
                                    </button>
                                </div>
                            </div>
                            <div class="d-flex w-100">
                                <label class="text-end text-muted w-25 p-2">Categoria:</label>
                                <input type="text" class="form-control bg-transparent w-50 ms-1 text-truncate" @bind="item.Key.Category.Name" />
                                <ValidationMessage For="() => item.Key.Category.Name" />
                            </div>
                        </div>
                    }
                </EditForm>
            }
        </div>
    </div>
}

@code {
    Dictionary<Product, string> ProductList = new Dictionary<Product, string>();
    List<Product>? Prods { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await fetchItems();
    }

    async Task fetchItems()
    {
        int skip = 0;
        int take = 10;
        // skip = pageNumber * take
        // pageNumber = floor( skip / take )

        Prods = null;
        ProductList.Clear();

        try
        {
            Prods = await http.GetFromJsonAsync<List<Product>>($"api/Products?skip={skip}&take={take}");
            if (Prods != null)
            {
                foreach (Product p in Prods)
                {
                    ProductList.Add(p, "readonly");
                }
            }
            else
            {
                Prods = new List<Product>();
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    void addItem()
    {
        NavManager.NavigateTo("/products/create");
    }

    async Task deleteItem(Product p)
    {
        try
        {
            await http.DeleteAsync($"api/Products/{p.ProductId}");
            await fetchItems();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    async Task editItem(Product p)
    {
        if (ProductList[p] == "readonly")
        {
            ProductList[p] = "";
        }
        else
        {
            ProductList[p] = "readonly";
            try
            {
                await http.PutAsJsonAsync("api/Products", p);
                await fetchItems();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }
}
